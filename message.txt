#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_ENTRIES 100
#define MAX_LEN 20

struct sTable {
    char name[MAX_ENTRIES][MAX_LEN];
    char idType[MAX_ENTRIES][MAX_LEN];
    char dataType[MAX_ENTRIES][MAX_LEN];
    char scope[MAX_ENTRIES][MAX_LEN];
    char value[MAX_ENTRIES][MAX_LEN];
} sTable;

int tablei = 0;

void insert(char n[], char iT[], char dT[], char scp[], char v[]) {
    strcpy(sTable.name[tablei], n);
    strcpy(sTable.idType[tablei], iT);
    strcpy(sTable.dataType[tablei], dT);
    strcpy(sTable.scope[tablei], scp);
    strcpy(sTable.value[tablei], v);
    tablei++;
}

void update(char n[], char scp[], char v[]) {
    int i;
    for (i = 0; i < tablei; i++) {
        if (strcmp(sTable.name[i], n) == 0 && strcmp(sTable.scope[i], scp) == 0) {
            strcpy(sTable.value[i], v);
            break;
        }
    }
}

int search(char n[], char scp[]) {
    int i;
    for (i = 0; i < tablei; i++) {
        if (strcmp(sTable.name[i], n) == 0) {
            if (strcmp(sTable.idType[i], "func") == 0) {
                return (i + 1);
            } else if (strcmp(sTable.scope[i], scp) == 0) {
                return (i + 1);
            }
        }
    }
    return 0;
}

void display() {
    printf("\nSl.No.\tName\tId Type\tData Type\tScope\tValue\n-------------------------------------------------------\n");
    for (int i = 0; i < tablei; i++) {
        printf("%d\t|%s\t|%s\t|%s\t\t|%s\t|%s\n", (i + 1), sTable.name[i], sTable.idType[i], sTable.dataType[i], sTable.scope[i], sTable.value[i]);
    }
}

int separator(char c) {
    return c == ';' || c == ',' || c == '\'';
}

int operators(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '>' || c == '<' || c == '!' || c == '=';
}

int parenthesis(char c) {
    return c == '(' || c == ')' || c == '{' || c == '}';
}

int keyword(const char *str) {
    const char *keywords[] = {"auto", "break", "case", "char", "const", "continue", "default",
        "do", "double", "else", "enum", "extern", "float", "for", "goto",
        "if", "int", "long", "register", "return", "short", "signed",
        "sizeof", "static", "struct", "switch", "typedef", "union",
        "unsigned", "void", "volatile", "while"};
    for (int i = 0; i < sizeof(keywords) / sizeof(keywords[0]); i++) {
        if (strcmp(str, keywords[i]) == 0)
            return 1;
    }
    return 0;
}

int identifier(const char *str) {
    if (!((str[0] >= 'a' && str[0] <= 'z') || (str[0] >= 'A' && str[0] <= 'Z') || str[0] == '_'))
        return 0;
    for (int i = 1; str[i]; i++) {
        if (!((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z') || str[i] == '_' || (str[i] >= '0' && str[i] <= '9'))) {
            return 0;
        }
    }
    return 1;
}

int directive(const char *str) {
    return str[0] == '#';
}

int is_num(const char *str) {
    int dot = 0;
    for (int i = 0; str[i]; i++) {
        if (str[i] == '.') {
            if (dot == 0) {
                dot = 1;
            } else {
                return 0;
            }
        } else if (!(str[i] >= '0' && str[i] <= '9')) {
            return 0;
        }
    }
    return 1;
}

int is_float(const char *str) {
    int dot = 0;
    int i = 0;


    if (str[i] == '+' || str[i] == '-') {
        i++;
    }

    for (; str[i]; i++) {
        if (str[i] == '.') {
            if (dot == 0) {
                dot = 1;
            } else {
                return 0;
            }
        } else if (!(str[i] >= '0' && str[i] <= '9')) {
            return 0;
        }
    }

    return dot;
}

void categorize(char *str, FILE *output) {
    char *token;
    const char delim[] = " \t\n";
    char currentDataType[MAX_LEN] = "";
    char scp[MAX_LEN] = "global";
    char currentIdentifier[MAX_LEN] = "";
    int isAssignment = 0;

    token = strtok(str, delim);
    while (token != NULL) {
        if (separator(token[0])) {
            printf("[ %c] ", token[0]);
            fprintf(output, "[ %c] ", token[0]);
        } else if (operators(token[0])) {
            printf("[ %c] ", token[0]);
            fprintf(output, "[ %c] ", token[0]);
            if (token[0] == '=') {
                isAssignment = 1;
            }
        } else if (parenthesis(token[0])) {
            printf("[ %c] ", token[0]);
            fprintf(output, "[ %c] ", token[0]);
        } else if (keyword(token)) {
            printf("[%s] ", token);
            fprintf(output, "[ %s] ", token);
            strcpy(currentDataType, token);
        } else if (identifier(token)) {
            if (strcmp(currentDataType, "") != 0) {
                printf("[id %s] ", token);
                fprintf(output, "[id %s] ", token);
                insert(token, "var", currentDataType, scp, "");
                strcpy(currentIdentifier, token);
                strcpy(currentDataType, "");
            } else {
                if (isAssignment) {
                    update(currentIdentifier, scp, token);
                    isAssignment = 0;
                }
                printf("[id %s] ", token);
                fprintf(output, "[id %s] ", token);
                strcpy(currentIdentifier, token);
            }
        } else if (directive(token)) {
            printf("[dir %s] ", token);
            fprintf(output, "[dir %s] ", token);
        } else if (is_float(token)) {
            if (isAssignment) {
                update(currentIdentifier, scp, token);
                isAssignment = 0;
            }
            printf("[%s] ", token);
            fprintf(output, "[%s] ", token);
        } else if (is_num(token)) {
            if (isAssignment) {
                update(currentIdentifier, scp, token);
                isAssignment = 0;
            }
            printf("[%s] ", token);
            fprintf(output, "[%s] ", token);
        } else {
            printf("[unkn %s] ", token);
            fprintf(output, "[unkn %s] ", token);
        }

        token = strtok(NULL, delim);
    }
}

int main() {
    char buffer[1000];
    FILE *fp = fopen("output.txt", "r");

    if (!fp) {
        printf("File is not found or empty");
        return 1;
    }

    size_t n = fread(buffer, 1, sizeof(buffer) - 1, fp);
    buffer[n] = '\0';
    fclose(fp);

    FILE *output = fopen("output1.txt", "w");
    if (!output) {
        printf("Could not open output file");
        return 1;
    }

    char lexemes[2000] = {0};
    int j = 0;
    for (int i = 0; buffer[i]; i++) {
        if (separator(buffer[i]) || operators(buffer[i]) || parenthesis(buffer[i])) {
            lexemes[j++] = ' ';
            lexemes[j++] = buffer[i];
            lexemes[j++] = ' ';
        } else {
            lexemes[j++] = buffer[i];
        }
    }

    printf("Input:\n%s\n\n\n", buffer);
    printf("Step 1:\n");
    categorize(lexemes, output);

    printf("\n\n\nStep 2: Symbol Table\n");
    display();


    for (int i = 0; i < tablei; i++) {
        char num[10];
        sprintf(num, "%d", i + 1);
        strcpy(sTable.name[i], num);
    }


    printf("\n\nStep 4: Updated Symbol Table\n");
    display();

    fclose(output);
    return 0;
}